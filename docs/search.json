[
  {
    "objectID": "posts (Topic 2)/index.html",
    "href": "posts (Topic 2)/index.html",
    "title": "Composte of Computer Science ̶C̶o̶m̶p̶l̶a̶i̶n̶t̶s̶ Compositions",
    "section": "",
    "text": "Hey hey hey\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts (Topic 1)/post1/index.html",
    "href": "posts (Topic 1)/post1/index.html",
    "title": "Ecclesiastical versus Classical",
    "section": "",
    "text": "This where I complain about the Classical pronunciation of Latin."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thomas’ Cool Little Website",
    "section": "",
    "text": "This is a website that I’m making for an assignment for CSC 324 at Georgetown College. Hope this is at least mildly entertaining and, God willing, neat. To the left and top, you can find links to the About page, two articles covering Eloquent Javascript problems. You can also access the 404 page by putting whatever in the URL after /warmup-thomas-spurlock, if you so desire.\nIf you’re in the mood, you can also check out this cool book. Highly recommend."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Determining Evenness via Recursion",
    "section": "",
    "text": "This problem is ALSO taken from Eloquent Javascript. If curious, it lives here, and it is usually welcoming to visitors. Here’s what it says:"
  },
  {
    "objectID": "articles/article_02.html#the-problem",
    "href": "articles/article_02.html#the-problem",
    "title": "Determining Evenness via Recursion",
    "section": "The Problem",
    "text": "The Problem\n“We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:\n-Zero is even.\n-One is odd.\n-For any other number N, its evenness is the same as N - 2.\nDefine a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.\nTest it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?”\nWhat Haverbeke is asking the strapping young reader to do here is to create a function that, using recursion, determines whether a number is even or not. It must return either TRUE or FALSE, and it must determine evenness by using the N - 2 technique: if a whole number, when subtracted by 2 enough times, eventually equals 0, it is even, or eventually equals 1, it is odd."
  },
  {
    "objectID": "articles/article_02.html#the-solution-to-part-1",
    "href": "articles/article_02.html#the-solution-to-part-1",
    "title": "Determining Evenness via Recursion",
    "section": "The Solution to Part 1",
    "text": "The Solution to Part 1\nFirst, we define the function isEven:\nconst isEven = function(x) {\n    if (x &lt; 0) {\n        return console.log(\"!!!!x must be a positive number!!!!\");\n    }\n    if (x == 1) {\n        return console.log(false);\n    } else if (x == 0) {\n        return console.log(true);\n    } else return isEven(x - 2);\n}\nisEven is a function accepting a single positive number, x, that returns either “true” if the number is even, or “false” if the number is odd. But let’s break it down:\nWe first set up a “negative gate”, as I’ll call it:\n\nif (x &lt; 0) {\n    return console.log(\"!!!!x must be a positive number!!!!\");\n}\nThe function first tests whether the number x is a negative number. If so, it prints an angry error message to the console.\nNext, we need to define a “base cases”, or in other words, the criteria needed for the funtion to return a desired outcome. For this function, we need to define two base cases, one for if x = 1 (that is, it’s odd), and another for x = 0 (it is even).\n\nif (x == 1) {\n       return console.log(false);\n   } else if (x == 0) {\n       return console.log(true);\nIf x ends up being equal to 1, the function prints “false” to the console, and if x is equal to 0, “true” is printed to the console.\nNow we get to the fun part: recursion! The main function of the isEven function is to use N (or x) - 2 to find out whether, if 2 is subtracted enough times, N - 2 eventually equals 1 or 0. That looks like this:\n\nif (x == 1) {\n        return console.log(false);\n    } else if (x == 0) {\n        return console.log(true);\n    } else return isEven(x - 2);\n}\nIf x manages to make it by both base cases, the function will rerun isEven using x -2. So, for example, if we make x = 2, it would first pass by both base cases, then rerun isEven where x = 0, instead. Since x = 0 is one of the base cases, the console would then print “true”."
  },
  {
    "objectID": "articles/article_02.html#the-solution-to-part-2",
    "href": "articles/article_02.html#the-solution-to-part-2",
    "title": "Determining Evenness via Recursion",
    "section": "The Solution to Part 2",
    "text": "The Solution to Part 2\nHowever, we aren’t done yet. The problem also asks us to figure out why inputting a negative value for x does not work. The reason for this is because negative numbers are less than both 0 and 1, so the N - 2 method will not work. We could either add an angry error message if x is a negative number, or we can adjust isEven to account for negative numbers. This is negisEven. Say hello!\n\nconst negisEven = function(x) {\n    if (x &lt; 0) {\n        let neg_x = -x;\n        if (neg_x == 1) {\n            return console.log(false);\n        } else if (neg_x == 0) {\n            return console.log(true);\n        }\n            else return negisEven(neg_x - 2)\n    }\n    if (x == 1) {\n        return console.log(false);\n    } else if (x == 0) {\n        return console.log(true);\n    } else return negisEven(x - 2);\n}\nThis function is identical to isEven except in how it handles negative numbers. For our “negative gate”, rather than simply telling you to buzz off, the following takes place:\n\nif (x &lt; 0) {\n        let neg_x = -x;\n        if (neg_x == 1) {\n            return console.log(false);\n        } else if (neg_x == 0) {\n            return console.log(true);\n        }\n            else return negisEven(neg_x - 2)\n    }\nneg_x is equal to the inverse of x, i.e., -x. The function then uses the same testing as isEven: if neg_x is equal to 0, “true” is printed to the console, and if neg_x is equal to 1, then “false” is printed to the console. And if neg_x is equal to neither of those, negisEven is run again, where x is set equal to neg_x. Functionality is identical to isEven after that."
  },
  {
    "objectID": "articles/article_02.html#the-javascript-file",
    "href": "articles/article_02.html#the-javascript-file",
    "title": "Determining Evenness via Recursion",
    "section": "The Javascript File",
    "text": "The Javascript File\nIn order to see this file in action, follow this link to see examples of this function’s use."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hey hello, my name is Thomas, and I am a student at Georgetown College. This is the warmup website I created for an assignment in CSC 324. But enough about the website, this page is about ME!————–&gt; (Note: picture may [is] be out of date)"
  },
  {
    "objectID": "about.html#basic-info",
    "href": "about.html#basic-info",
    "title": "About",
    "section": "Basic Info",
    "text": "Basic Info\nAs I said before, my name is Thomas. I was born in Louisville, KY, in a small suburban neighborhood. My father works as the QA head for UofL Physicians, while my mother works as a standardized testing tutor and teacher. I also have an older brother, who graduated from Georgetown about 4 years ago.\nI come from a family of both eastern and western European descent. Though mostly Irish and Polish/Lithuanian (my great-grandma was a Polish national), I also have a smattering of Scottish, English, and even a small bit of South African. Having moved to the New World during the later Colonial Period, my family made their way from Maryland to Kentucky, and for the most part, we have stayed there."
  },
  {
    "objectID": "about.html#interests",
    "href": "about.html#interests",
    "title": "About",
    "section": "Interests",
    "text": "Interests\nAs one may be able to guess from the above description of my ancestry, I have an interest in genealogy. However, this stems from my greatest interest: history, and specifically, Classics.\nThe exploits of the Greeks and Romans have demanded my attention ever since I was a young lad. Having attended the same small classical Christian school for my whole pre-college life, I grew up studying Latin and later Greek, reading the Bible, and learning the history of Western Civilization and how we got to the point we find ourselves at today.\nNaturally, having studied Western history, I have studied the history of Christianity (being a Christian), as the two are inseparably linked. This leads me to my other favorite area of study: Christianity and theology. Originally attending a Baptist church as a baby, then being a heretical Lutheran (I won’t get into it here), I now am in the process of being confirmed into the Roman Catholic Church. The history of Europe is the history of Christendom, and to study one without the other is not seeing the whole picture. Christianity shapes the way every Western nation thinks, even if one denies it or attempts to separate itself from Christianity.\nThe combination of the study of Christianity and the West, both with their tales and epics of great heroes, monsters, saints, nations, and wars has shaped my perception of life around me. One could say I am a Romantic. I dream of a time of heroes like Achilles, Gothic cathedrals, exploration of new lands, and Arthurian adventures, even as we see each one of those things seemingly vanishing from the public consciousness and concern. It makes life much more interesting, and more worth living (which aren’t the only reasons I believe they are what is important, of course). But I digress.\nAside from the aforementioned areas of study, I also have an interest in computer science and programming. Though I dream and long for the past, that does not prevent me from recognizing that the age we live in is one of technology. Though I fear the machine, I must face it in some form or fashion. That’s why and how you’re reading this little blurb, if you didn’t know!\nMy favorite book is The Divine Comedy by Dante Alighieri. This is the version I read, which is good, but the Dorothy Sayers version has great notes and is translated by a Catholic, so everything should be accurate for the most part. I believe this is the crown jewel of not just Medieval literature, but also perhaps of Christian literature (aside from the Bible) in general. Aside from that, some of my other favorite works include the Summa Theologia of St. Thomas Aquinas, Orthodoxy by G.K. Chesterton (both of which greatly influenced how I think) and The Aeneid of Virgil, the greatest pre-Christian epic. Highly recommend checking out all of them.\nAnyway, hopefully that tells you enough about me. Enjoy your time here on the site!\n–Thomas"
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Looping a Triangle in Javascript",
    "section": "",
    "text": "This problem is taken from Eloquent Javascript. You can find it here. Let’s see what it says:"
  },
  {
    "objectID": "articles/article_01.html#the-problem",
    "href": "articles/article_01.html#the-problem",
    "title": "Looping a Triangle in Javascript",
    "section": "The Problem",
    "text": "The Problem\n“Write a loop that makes seven calls to console.log to output the following triangle:\n#\n##\n###\n####\n#####\n######\n#######\n(but without the apostrophes).”"
  },
  {
    "objectID": "articles/article_01.html#the-solution",
    "href": "articles/article_01.html#the-solution",
    "title": "Looping a Triangle in Javascript",
    "section": "The Solution",
    "text": "The Solution\nHere is the full code for the triangle:\n\nlet symbol = \"#\";\nfor (let length = symbol.length; symbol.length &lt;= 7; symbol += \"#\") {\n    console.log(symbol)\n}\nThe idea behind this solution is utilizing a simple for-loop. “symbol” is set equal to #, as that is the first line. From there, while the iterable “i” is less than 7, the length of the last line of the triangle, another # is added onto “symbol”, and each addition is printed to the console. Thus, if we were to run the code, each iteration of “symbol” would be printed to the console."
  },
  {
    "objectID": "articles/article_01.html#the-javascript-file",
    "href": "articles/article_01.html#the-javascript-file",
    "title": "Looping a Triangle in Javascript",
    "section": "The Javascript File",
    "text": "The Javascript File\nThe raw code can be found here."
  },
  {
    "objectID": "customization.html",
    "href": "customization.html",
    "title": "Themes",
    "section": "",
    "text": "Want to upload a cool new theme for your visit to the website? Just click that button and choose a jpeg from your computer!\n\n Upload Image\n\n\n\n\n\n\n\n\nCool, huh?"
  },
  {
    "objectID": "posts (Topic 1)/index.html",
    "href": "posts (Topic 1)/index.html",
    "title": "Eclectic Ecclesial Essays",
    "section": "",
    "text": "This is where you can read about me complaining about things related to/adjacent to Church matters. Enjoy!\n\n\n\n\n\n\n\n\n  \n\n\n\n\nIreland: Broken Greatness\n\n\n\n\n\n\n\nClassics\n\n\nIreland\n\n\n\n\nThe British Ruin Everything.\n\n\n\n\n\n\nMar 17, 2023\n\n\nThomas Spurlock\n\n\n\n\n\n\n  \n\n\n\n\nEcclesiastical versus Classical\n\n\n\n\n\n\n\nClassics\n\n\nIdes of March\n\n\n\n\nCaesar, not Caesar\n\n\n\n\n\n\nMar 15, 2021\n\n\nThomas Spurlock\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts (Topic 1)/post2/index.html",
    "href": "posts (Topic 1)/post2/index.html",
    "title": "Ireland: Broken Greatness",
    "section": "",
    "text": "Here’s where I explain why Ireland was once a great nation, preserving much of Roman civilization, and how that all changed."
  }
]