---
title: "Determining Evenness via Recursion"
---

This problem is ALSO taken from *Eloquent Javascript*. If curious, it lives [here](https://eloquentjavascript.net/03_functions.html#i_jxl1p970Fy){target="_blank"}, and it is usually welcoming to visitors. Here's what it says:

## The Problem

"We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:

-Zero is even.

-One is odd.

-For any other number N, its evenness is the same as N - 2.

Define a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.

Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?"

What Haverbeke is asking the strapping young reader to do here is to create a function that, using recursion, determines whether a number is even or not. It must return either TRUE or FALSE, and it must determine evenness by using the N - 2 technique: if a whole number, when subtracted by 2 enough times, eventually equals 0, it is even, or eventually equals 1, it is odd. 

## The Solution to Part 1

First, we define the function isEven:

```.js
const isEven = function(x) {
    if (x < 0) {
        return console.log("!!!!x must be a positive number!!!!");
    }
    if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);
    } else return isEven(x - 2);
}
```


isEven is a function accepting a single positive number, x, that returns either "true" if the number is even, or "false" if the number is odd. But let's break it down:

We first set up a "negative gate", as I'll call it:


```.js

if (x < 0) {
    return console.log("!!!!x must be a positive number!!!!");
}

```


 The function first tests whether the number x is a negative number. If so, it prints an angry error message to the console.

 Next, we need to define a "base cases", or in other words, the criteria needed for the funtion to return a desired outcome. For this function, we need to define two base cases, one for if x = 1 (that is, it's odd), and another for x = 0 (it is even).


 ```.js

if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);

 ```


If x ends up being equal to 1, the function prints "false" to the console, and if x is equal to 0, "true" is printed to the console.

Now we get to the fun part: recursion! The main *function* of the isEven function is to use N (or x) - 2 to find out whether, if 2 is subtracted enough times, N - 2 eventually equals 1 or 0. That looks like this:


```.js

if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);
    } else return isEven(x - 2);
}

```


If x manages to make it by both base cases, the function will rerun isEven using x -2. So, for example, if we make x = 2, it would first pass by both base cases, then rerun isEven where x = 0, instead. Since x = 0 is one of the base cases, the console would then print "true".

## The Solution to Part 2

However, we aren't done yet. The problem also asks us to figure out why inputting a negative value for x does not work. The reason for this is because negative numbers are less than both 0 and 1, so the N - 2 method will not work. We could either add an angry error message if x is a negative number, or we can adjust isEven to account for negative numbers. This is negisEven. Say hello!


```.js

const negisEven = function(x) {
    if (x < 0) {
        let neg_x = -x;
        if (neg_x == 1) {
            return console.log(false);
        } else if (neg_x == 0) {
            return console.log(true);
        }
            else return negisEven(neg_x - 2)
    }
    if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);
    } else return negisEven(x - 2);
}

```


This function is identical to isEven except in how it handles negative numbers. For our "negative gate", rather than simply telling you to buzz off, the following takes place:

```.js

if (x < 0) {
        let neg_x = -x;
        if (neg_x == 1) {
            return console.log(false);
        } else if (neg_x == 0) {
            return console.log(true);
        }
            else return negisEven(neg_x - 2)
    }

```


neg_x is equal to the inverse of x, i.e., -x. The function then uses the same testing as isEven: if neg_x is equal to 0, "true" is printed to the console, and if neg_x is equal to 1, then "false" is printed to the console. And if neg_x is equal to neither of those, negisEven is run again, where x is set equal to neg_x. Functionality is identical to isEven after that.


## The Javascript File

In order to see this file in action, follow [this link](/js/recursion.js){target="_blank"} to see examples of this function's use.


