---
title: "Determining Evenness via Recursion"
---

## The Problem

This problem is ALSO taken from *Eloquent Javascript*. If curious, it lives [here](https://eloquentjavascript.net/03_functions.html#i_jxl1p970Fy){target="_blank"}, and it is usually welcoming to visitors.

"We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:

-Zero is even.

-One is odd.

-For any other number N, its evenness is the same as N - 2.

Define a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.

Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?"

What Haverbeke is asking the strapping young reader to do here is to create a function that, using recursion, determines whether a number is even or not. It must return either TRUE or FALSE, and it must determine evenness by using the N - 2 technique: if a whole number, when subtracted by 2 enough times, eventually equals 0, it is even, or eventually equals 1, it is odd. 

## The Solution

First, we define the function isEven:

```.js
const isEven = function(x) {
    if (x < 0) {
        return console.log("!!!!x must be a positive number!!!!");
    }
    if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);
    } else return isEven(x - 2);
}
```


isEven is a function accepting a single positive number, x, that returns either "true" if the number is even, or "false" if the number is odd. But let's break it down:

We first set up a "negative gate", as I'll call it:


```.js

if (x < 0) {
    return console.log("!!!!x must be a positive number!!!!");
}

```


 The function first tests whether the number x is a negative number. If so, it prints an angry error message to the console.

 Next, we need to define a "base cases", or in other words, the criteria needed for the funtion to return a desired outcome. For this function, we need to define two base cases, one for if x = 1 (that is, it's odd), and another for x = 0 (it is even).


 ```.js

if (x == 1) {
        return console.log(false);
    } else if (x == 0) {
        return console.log(true);

 ```

If x ends up being equal to 1, the function prints "false" to the console, and if x is equal to 0, "true" is printed to the console.

Now we get to the fun part: recursion! The 



